// By Daniel Zhang, Pinetree Secondary

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int r, c, m;

int grid(int row, int col) {
    int num = row * c + col;
    num %= m;
    return num + 1;
}

int main() {
    cin >> r >> c >> m;
    vector<vector<int>> dp(r, vector<int>(c, 0));

    for (int i = 0; i < c; i++) {
        dp[0][i] = grid(0, i);
    }

    for (int i = 1; i < r; i++) {
        dp[i][0] = min(dp[i - 1][0], dp[i - 1][1]) + grid(i, 0);
        dp[i][c - 1] = min(dp[i - 1][c - 2], dp[i - 1][c - 1]) + grid(i, c - 1);
        for (int j = 1; j < c - 1; j++) {
            dp[i][j] = min({dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]}) + grid(i, j);
        }
    }

    cout << *min_element(dp[r - 1].begin(), dp[r - 1].end()) << endl;
}

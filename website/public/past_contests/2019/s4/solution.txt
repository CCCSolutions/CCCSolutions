// Daniel Zhang, Pinetree Secondary School
// Editorial for this solution available at https://dmoj.ca/user/sinsane/


#include <bits/stdc++.h>

using namespace std;

using ll = long long;

ll arr[1000015], dp[1000015], st[1000015][20];

//queries max from l, r inclusive
ll rmq(ll l, ll r) {
    if (l > r) return 0;
    ll length = r - l + 1, k = 31 - __builtin_clz(length);
    return max(st[l][k], st[r-(1<<k)+1][k]);
}

int main() {
    ios_base::sync_with_stdio(false); cin.tie(0);

    ll n, k; cin >> n >> k;

    for (ll i=1; i<=n; i++) {cin >> arr[i]; st[i][0] = arr[i];}

    if (k == 1) {
        cout << accumulate(arr, arr + n + 1, 0LL) << endl;
        return 0;
    }
    //Build max sparse table (errichto, should be correct)
    for (int m = 1; m < 20; m++) {
        for (int i = 1; i + (1<<m)-1 <= n; i++) {
            st[i][m] = max(st[i][m-1], st[i+(1<<(m-1))][m-1]);
        }
    }
    
    deque<ll> red; red.push_back(0);
    deque<ll> blue; blue.push_back(0);

    int blockStart = 1;
    for (int i=1; i<=n; i++) {
        if (i % k == 1 && i != 1) { //new day block
            blockStart = i;
            red.clear(); blue.clear();

            for (int j=i-k; j<i; j++) { //add all previous day transitions into monoqueues
                while (!red.empty() && dp[red.back()] <= dp[j]) red.pop_back();
                red.push_back(j);

                while (!blue.empty() && dp[blue.back()] + rmq(blue.back()+1, i-1) <= dp[j] + rmq(j+1, i-1)) blue.pop_back();
                blue.push_back(j);
            }
            //cout << red << endl;
            //cout << blue << endl;
        }
        
        ll withRed = dp[red.front()] + rmq(blockStart, i);
        ll withBlue = dp[blue.front()] + rmq(blue.front()+1, i);
        dp[i] = max(withRed, withBlue);
        
        //trim monoqueues
        while (!red.empty() && red.front() <= i-k) red.pop_front();
        while (!blue.empty() && blue.front() <= i-k) blue.pop_front();
    }

    
    cout << dp[n] << endl;
}